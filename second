"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Calendar, Gift, Star, Sparkles, Heart, CheckCircle, XCircle } from "lucide-react"

export default function EnterBirthdayPage() {
  const searchParams = useSearchParams()
  const name = searchParams.get("name") || ""
  const [birthday, setBirthday] = useState("")
  const [isLoading, setIsLoading] = useState(false)
  const [colorIndex, setColorIndex] = useState(0)
  const router = useRouter()

  const colors = [
    "from-red-400 to-pink-400",
    "from-pink-400 to-purple-400",
    "from-purple-400 to-blue-400",
    "from-blue-400 to-cyan-400",
    "from-cyan-400 to-green-400",
    "from-green-400 to-yellow-400",
    "from-yellow-400 to-orange-400",
    "from-orange-400 to-red-400",
  ]

  useEffect(() => {
    const interval = setInterval(() => {
      setColorIndex((prev) => (prev + 1) % colors.length)
    }, 1000)
    return () => clearInterval(interval)
  }, [])

  // Akki's birthday in YYYY-MM-DD format
  const correctBirthday = "2005-08-12" // 12-08-2005

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    if (!birthday) {
      alert("Please enter Akki's birthday!")
      return
    }

    setIsLoading(true)

    // Add a small delay for better UX
    await new Promise((resolve) => setTimeout(resolve, 1000))

    if (birthday === correctBirthday) {
      // Correct birthday - redirect to happy birthday page
      router.push(`/happy-birthday?name=${encodeURIComponent(name)}`)
    } else {
      // Wrong birthday - redirect to hurt page
      router.push(`/hurt?name=${encodeURIComponent(name)}`)
    }
  }

  // If no name is provided, redirect back to the home page
  if (!name && typeof window !== "undefined") {
    router.push("/")
    return null
  }

  return (
    <div
      className={`min-h-screen bg-gradient-to-br ${colors[colorIndex]} flex items-center justify-center p-4 relative overflow-hidden transition-all duration-1000`}
    >
      {/* Enhanced animated background */}
      <div className="absolute inset-0 overflow-hidden">
        {/* Floating elements */}
        {[...Array(40)].map((_, i) => (
          <div
            key={i}
            className="absolute animate-float-complex opacity-60"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 6}s`,
              animationDuration: `${2 + Math.random() * 4}s`,
            }}
          >
            {i % 5 === 0 ? (
              <Star className="h-6 w-6 text-yellow-200 animate-spin" />
            ) : i % 5 === 1 ? (
              <Sparkles className="h-4 w-4 text-pink-200 animate-pulse" />
            ) : i % 5 === 2 ? (
              <Heart className="h-4 w-4 text-red-200 animate-bounce" />
            ) : i % 5 === 3 ? (
              <Calendar className="h-5 w-5 text-blue-200 animate-spin-slow" />
            ) : (
              <div className="w-3 h-3 bg-white rounded-full animate-ping" />
            )}
          </div>
        ))}

        {/* Animated shapes */}
        {[...Array(12)].map((_, i) => (
          <div
            key={`shape-${i}`}
            className="absolute animate-morph opacity-20"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              width: `${30 + Math.random() * 80}px`,
              height: `${30 + Math.random() * 80}px`,
              background: `linear-gradient(${Math.random() * 360}deg, 
                rgba(255,255,255,0.3), 
                rgba(255,255,255,0.1))`,
              borderRadius: i % 2 === 0 ? "50%" : "20%",
              animationDelay: `${Math.random() * 4}s`,
              animationDuration: `${3 + Math.random() * 3}s`,
            }}
          />
        ))}
      </div>

      <Card className="w-full max-w-lg shadow-2xl relative z-10 bg-white/95 backdrop-blur-md border-2 border-white/50 animate-scale-pulse">
        <CardHeader className="text-center space-y-4">
          <div className="flex justify-center">
            <Gift className="h-12 w-12 text-pink-500 animate-wiggle" />
          </div>
          <CardTitle className="text-2xl font-bold bg-gradient-to-r from-purple-600 via-pink-600 via-blue-600 to-cyan-600 bg-clip-text text-transparent animate-text-shimmer">
            Hi, {name}!
          </CardTitle>
          <CardDescription className="text-gray-600 animate-fade-in-up">
            Do you know when Akki's birthday is? ü§î
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="birthday" className="text-sm font-medium flex items-center gap-2 text-purple-700">
                <Calendar className="h-4 w-4 animate-bounce" />
                Akki's Birthday
              </Label>
              <Input
                id="birthday"
                type="date"
                value={birthday}
                onChange={(e) => setBirthday(e.target.value)}
                className="w-full border-2 border-pink-200 focus:border-purple-400 transition-all duration-300 focus:shadow-lg focus:shadow-purple-200 focus:scale-105"
                required
              />

              {/* Warning Message */}
              <div className="mt-3 p-3 bg-red-100/80 border-l-4 border-red-500 rounded-md animate-warning-pulse">
                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <svg
                      className="h-5 w-5 text-red-500 animate-pulse"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path
                        fillRule="evenodd"
                        d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                        clipRule="evenodd"
                      />
                    </svg>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm text-red-700 font-medium animate-text-warning">
                      Warning: Entering the wrong birthday may hurt Akki's feelings! üíî
                    </p>
                  </div>
                </div>
              </div>

              {/* Redirect Information */}
              <div className="mt-4 space-y-3">
                <div className="p-3 bg-green-100/80 border-l-4 border-green-500 rounded-md animate-info-pulse">
                  <div className="flex items-start">
                    <CheckCircle className="h-5 w-5 text-green-500 animate-pulse flex-shrink-0 mt-0.5" />
                    <div className="ml-3">
                      <p className="text-sm text-green-700 font-medium">
                        ‚úÖ If correct: Akki will wish you Happy Birthday!
                      </p>
                    </div>
                  </div>
                </div>

                <div className="p-3 bg-red-100/80 border-l-4 border-red-500 rounded-md animate-info-pulse">
                  <div className="flex items-start">
                    <XCircle className="h-5 w-5 text-red-500 animate-pulse flex-shrink-0 mt-0.5" />
                    <div className="ml-3">
                      <p className="text-sm text-red-700 font-medium">‚ùå If wrong: Akki hurt po!</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <Button
              type="submit"
              className="w-full bg-gradient-to-r from-purple-500 via-pink-500 via-blue-500 to-cyan-500 hover:from-purple-600 hover:via-pink-600 hover:via-blue-600 hover:to-cyan-600 text-white font-semibold py-2 px-4 rounded-lg transition-all duration-300 transform hover:scale-110 hover:shadow-2xl animate-rainbow-border"
              disabled={isLoading}
            >
              {isLoading ? (
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Checking...
                </div>
              ) : (
                <div className="flex items-center gap-2 animate-bounce-subtle">Submit</div>
              )}
            </Button>
          </form>
        </CardContent>
      </Card>

      <style jsx>{`
        @keyframes float-complex {
          0% { transform: translateY(0px) translateX(0px) rotate(0deg); }
          33% { transform: translateY(-15px) translateX(10px) rotate(120deg); }
          66% { transform: translateY(5px) translateX(-10px) rotate(240deg); }
          100% { transform: translateY(0px) translateX(0px) rotate(360deg); }
        }
        @keyframes morph {
          0%, 100% { transform: scale(1) rotate(0deg); border-radius: 50%; }
          50% { transform: scale(1.2) rotate(180deg); border-radius: 20%; }
        }
        @keyframes wiggle {
          0%, 100% { transform: rotate(0deg); }
          25% { transform: rotate(5deg); }
          75% { transform: rotate(-5deg); }
        }
        @keyframes scale-pulse {
          0%, 100% { transform: scale(1); }
          50% { transform: scale(1.02); }
        }
        @keyframes text-shimmer {
          0% { background-position: -200% center; }
          100% { background-position: 200% center; }
        }
        @keyframes fade-in-up {
          0% { opacity: 0; transform: translateY(20px); }
          100% { opacity: 1; transform: translateY(0); }
        }
        @keyframes rainbow-border {
          0% { box-shadow: 0 0 20px rgba(147, 51, 234, 0.5); }
          25% { box-shadow: 0 0 20px rgba(236, 72, 153, 0.5); }
          50% { box-shadow: 0 0 20px rgba(59, 130, 246, 0.5); }
          75% { box-shadow: 0 0 20px rgba(6, 182, 212, 0.5); }
          100% { box-shadow: 0 0 20px rgba(147, 51, 234, 0.5); }
        }
        @keyframes bounce-subtle {
          0%, 100% { transform: translateY(0); }
          50% { transform: translateY(-2px); }
        }
        @keyframes warning-pulse {
          0%, 100% { background-color: rgba(254, 226, 226, 0.8); border-color: rgba(239, 68, 68, 0.5); }
          50% { background-color: rgba(254, 202, 202, 0.9); border-color: rgba(239, 68, 68, 0.8); }
        }
        @keyframes info-pulse {
          0%, 100% { transform: scale(1); opacity: 0.9; }
          50% { transform: scale(1.01); opacity: 1; }
        }
        @keyframes text-warning {
          0%, 100% { transform: translateX(0); }
          10%, 30%, 50%, 70%, 90% { transform: translateX(-1px); }
          20%, 40%, 60%, 80% { transform: translateX(1px); }
        }
        .animate-float-complex { animation: float-complex 5s ease-in-out infinite; }
        .animate-morph { animation: morph 4s ease-in-out infinite; }
        .animate-wiggle { animation: wiggle 2s ease-in-out infinite; }
        .animate-scale-pulse { animation: scale-pulse 2s ease-in-out infinite; }
        .animate-text-shimmer { 
          animation: text-shimmer 2s linear infinite;
          background-size: 200% auto;
        }
        .animate-fade-in-up { animation: fade-in-up 1s ease-out; }
        .animate-rainbow-border { animation: rainbow-border 2s ease-in-out infinite; }
        .animate-bounce-subtle { animation: bounce-subtle 1s ease-in-out infinite; }
        .animate-warning-pulse { animation: warning-pulse 2s ease-in-out infinite; }
        .animate-info-pulse { animation: info-pulse 2s ease-in-out infinite; }
        .animate-text-warning { animation: text-warning 0.5s ease-in-out infinite; animation-iteration-count: 3; }
      `}</style>
    </div>
  )
}
